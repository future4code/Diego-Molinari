{"version":3,"sources":["components/Etapa1.js","components/Etapa2.js","components/Etapa3.js","components/Final.js","App.js","serviceWorker.js","index.js"],"names":["Etapa1","className","value","Etapa2","Etapa3","Final","App","state","etapa","renderizaEtapa","irParaProximaEtapa","valueEtapa","setState","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAwBeA,MArBf,WACE,OACE,yBAAKC,UAAU,UACb,sDACA,kDACA,gCACA,iDACA,gCACA,iDACA,gCACA,0DACA,gCACI,4BAAQC,MAAM,IAAd,8BACA,4BAAQA,MAAM,IAAd,4BACA,4BAAQA,MAAM,IAAd,8BACA,4BAAQA,MAAM,IAAd,+BCHKC,MAZf,WACE,OACE,yBAAKF,UAAU,UACb,8EACA,6CACA,gCACA,yDACA,kCCSSG,MAhBf,WACE,OACE,yBAAKH,UAAU,UACb,4EACA,8FACA,gCACA,uEACA,gCACI,4BAAQC,MAAM,IAAd,UACA,4BAAQA,MAAM,IAAd,sBACA,4BAAQA,MAAM,IAAd,uBCDKG,MATf,WACE,OACE,yBAAKJ,UAAU,SACb,sDACA,sFCqCSK,E,4MAnCbC,MAAQ,CACNC,MAAO,G,EAGTC,eAAgB,WACd,OAAO,EAAKF,MAAMC,OAChB,KAAK,EACH,OAAO,kBAAC,EAAD,MACP,KAAK,EACL,OAAO,kBAAC,EAAD,MACP,KAAK,EACL,OAAO,kBAAC,EAAD,MACP,KAAK,EACL,OAAO,kBAAC,EAAD,MACP,QACA,S,EAINE,mBAAqB,WACnB,IAAIC,EAAa,EAAKJ,MAAMC,MAC5BG,IACA,EAAKC,SAAS,CAACJ,MAAOG,K,uDAItB,OACE,yBAAKV,UAAU,OACZY,KAAKJ,iBACgB,IAArBI,KAAKN,MAAMC,MAAc,4BAAQM,QAASD,KAAKH,oBAAtB,oBAAmE,uC,GA/BnFK,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.14289ec2.chunk.js","sourcesContent":["import React from 'react';\r\n//import './Etapa1.css';\r\n\r\nfunction Etapa1() {\r\n  return (\r\n    <div className=\"Etapa1\">\r\n      <h1>ETAPA 1 - DADOS GERAIS</h1>\r\n      <p>1. Qual o seu nome?</p>\r\n      <input />\r\n      <p>2. Qual sua idade?</p>\r\n      <input />\r\n      <p>3. Qual seu email?</p>\r\n      <input />\r\n      <p>4. Qual a sua escolaridade?</p>\r\n      <select>\r\n          <option value=\"\">Ensino Médio Incompleto</option>\r\n          <option value=\"\">Ensino Médio Completo</option>\r\n          <option value=\"\">Ensino Superior Incompleto</option>\r\n          <option value=\"\">Ensino Superior Completo</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Etapa1;\r\n","import React from 'react';\r\n//import './App.css';\r\n\r\nfunction Etapa2() {\r\n  return (\r\n    <div className=\"Etapa2\">\r\n      <h1>ETAPA 2 - INFORMAÇÕES DO ENSINO SUPERIOR</h1>\r\n      <p>5. Qual curso?</p>\r\n      <input />\r\n      <p>6. Qual unidade de ensino?</p>\r\n      <input />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Etapa2;","import React from 'react';\r\n//import './App.css';\r\n\r\nfunction Etapa3() {\r\n  return (\r\n    <div className=\"Etapa3\">\r\n      <h1>ETAPA 3 - INFORMAÇÕES GERAIS DE ENSINO</h1>\r\n      <p>5. Por que você não terminou um curso de graduação?</p>\r\n      <input />\r\n      <p>6. Você fez algum curso complementar?</p>\r\n      <select>\r\n          <option value=\"\">Não</option>\r\n          <option value=\"\">Curso de inglês</option>\r\n          <option value=\"\">Curso técnico</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Etapa3;","import React from 'react';\r\n//import './Final.css';\r\n\r\nfunction Final() {\r\n  return (\r\n    <div className=\"Final\">\r\n      <h1>O FORMULÁRIO ACABOU</h1>\r\n      <p>Muito obrigado por participar! Entraremos em contato!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Final;","import React from 'react';\nimport './App.css';\nimport Etapa1 from './components/Etapa1';\nimport Etapa2 from './components/Etapa2';\nimport Etapa3 from './components/Etapa3';\nimport Final from './components/Final';\n\nclass App extends React.Component {\n\n  state = {\n    etapa: 1,\n  }\n\n  renderizaEtapa =() => {\n    switch(this.state.etapa) {\n      case 1:\n        return <Etapa1/>;\n        case 2:\n        return <Etapa2/>;\n        case 3:\n        return <Etapa3/>;\n        case 4:\n        return <Final/>;\n        default:\n        return;\n    }\n  }  \n  \n  irParaProximaEtapa = () => {\n    let valueEtapa = this.state.etapa;\n    valueEtapa++;\n    this.setState({etapa: valueEtapa});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderizaEtapa()}\n        {this.state.etapa !== 4 ? <button onClick={this.irParaProximaEtapa}>Próxima etapa</button> : <div> </div>} \n      </div>\n    );\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}