/* Exerc√≠cio 1.
Analise a classe User. Perceba quais propriedades s√£o p√∫blicas e quais s√£o privadas. Copie esse c√≥digo para o seu exerc√≠cio de hoje; crie uma inst√¢ncia dessa classe (d√™ o nome, email, etc que voc√™ quiser) e imprima, no terminal, o id, o nome e o email desse usu√°rio. 

a. Seria poss√≠vel imprimir a senha (password) atrelada a essa inst√¢ncia?
R- N√£o, pois o password est√° declarado como privado e eu nao tenho um geter para ele
b. Quantas vezes a mensagem "Chamando o construtor da classe User" foi impressa no terminal?
R- Foi chamado uma vez */

import { User } from './User';

const newUser: User = new User('1', 'usuario1@gmail.com', 'Usu√°rio1', '123456');
console.log('Ex.1----------------------------------------------');
console.log('id do usu√°rio: ', newUser.getId());
console.log('Nome do usu√°rio: ', newUser.getName());
console.log('E-mail do usu√°rio: ', newUser.getEmail());
console.log('----------------------------------------------');

/* Exerc√≠cio 2. 
Analise a Customer. Perceba quais propriedades s√£o p√∫blicas e quais s√£o privadas. Copie esse c√≥digo para o seu exerc√≠cio de hoje e crie uma inst√¢ncia dessa classe (com as informa√ß√µes que voc√™ quiser). Atente-se ao fato de que o Customer √© uma subclasse (ou classe filha) da classe User. Sabemos disso porque h√° a palavra extends na declara√ß√£o da classe Customer; e, em seu construtor, foi usado o super.


a. Quantas vezes a mensagem "Chamando o construtor da classe Customer" foi impressa no terminal? 
Foi impressa uma vez
b. Quantas vezes a mensagem "Chamando o construtor da classe User" foi impressa no terminal? Por qu√™?
Foi impressa duas vezes. Porque quando eu chamo o construtor da classe filha eu tamb√©m chamo o construtor da classe pai */
import { Customer } from './Customer';
const newCustumer: Customer = new Customer(
  '5',
  'diego@gmail.com',
  'Diego',
  '2234556',
  '123456789',
);

/* Exerc√≠cio 3.
Agora, imprima todas as informa√ß√µes poss√≠veis da inst√¢ncia que voc√™ criou: o id, o nome, o email, o valor total de compra (purchaseTotal) e o cart√£o de cr√©dito (creditCard). Perceba que as propriedades p√∫blicas da classe pai (User) foram "herdadas" pela classe filha (Customer).

a. Seria poss√≠vel imprimir a senha (password) atrelada a essa inst√¢ncia? Por qu√™? 
R- N√£o porque o password √© um atributo da classe pai e n√£o tem um geter para ele em User, assim ele nao pode ser acessado dentro do Custumer  */
console.log('Ex.3----------------------------------------------');
console.log('ID do consumidor: ', newCustumer.getId());
console.log('Nome do consumidor: ', newCustumer.getName());
console.log('E-mail do consumidor: ', newCustumer.getEmail());
console.log('Total de compra do consumidor: ', newCustumer.purchaseTotal);
console.log('Cart√£o de cr√©dito do consumidor: ', newCustumer.getCreditCard());
console.log('----------------------------------------------');

/* Exerc√≠cio 4.
Adicione um m√©todo p√∫blico √† classe User. Esse m√©todo deve ter o nome de introduceYourself("apresente-se") e deve retornar a mensagem: "Ol√°, bom dia!". As classes filhas sempre t√™m acesso aos m√©todos p√∫blicos da classe pai. Ent√£o, para realizar o teste dessa sua fun√ß√£o, fa√ßa com que a inst√¢ncia que voc√™ criou para a classe Customer chame esse m√©todo  */
newCustumer.introduceYourself();

/* Exerc√≠cio 5.
Altere o m√©todo que voc√™ acabou de criar para que ele imprima a mensagem: "Ol√°, sou ${nome do usu√°rio}. Bom dia!". Realize os mesmos testes anteriores. 
R- A altera√ß√£o foi feita no User.ts */

/* Exerc√≠cio 6.
Agora, vamos criar uma nova classe: a que representa os funcion√°rios (Employee). Ela deve ser uma classe filha da classe User. Al√©m disso,  ela deve possuir as propriedades: data de admiss√£o (admissionDate) e sal√°rio base (baseSalary). Como elas s√£o informa√ß√µes sens√≠veis, n√£o √© recomend√°vel que sejam p√∫blicas. Ent√£o, iremos declar√°-las com o encapsulador protected (voc√™ vai entender o motivo mais para frente). Adicione dois m√©todos getters: um para acessar o admissionDate e outro para o baseSalary. Crie uma inst√¢ncia da classe Employee 
a. Quantas vezes a mensagem `"Chamando o construtor da classe User"` foi impressa no terminal?
R - tr√™s vezes */

import { Employee } from './Employee';
import moment from 'Moment';
import { Seller } from './Seller';
const newEmployee: Employee = new Employee(
  '20',
  'employee1@gmail.com',
  'Employee1',
  '1234562',
  moment('01/09/2018', 'DD/MM/YYYY').format('DD/MM/YYYY'),
  400,
);

console.log(newEmployee);

/* b. Imprima as informa√ß√µes dessa inst√¢ncia no terminal. Quais dados s√£o poss√≠veis de serem impressos?*/
console.log('Ex.6----------------------------------------------');
console.log('ID do Funcion√°rio: ', newEmployee.getId());
console.log('Nome do Funcion√°rio: ', newEmployee.getName());
console.log('E-mail do Funcion√°rio: ', newEmployee.getEmail());
console.log(
  'Data de Admiss√£o do Funcion√°rio: ',
  newEmployee.getAdmissionDate(),
);
console.log(`Salario Base do Funcion√°rio: R$`, newEmployee.getBaseSalary());
console.log('----------------------------------------------');

/* Exerc√≠cio 7.
Adicione um m√©todo p√∫blico √† classe Employee: calculateTotalSalary ("calcula o sal√°rio total"). Ele deve retornar o valor do baseSalary somado com os benef√≠cios do funcion√°rio, considere que todos possuem o mesmo valor de R$400 de benef√≠cios. Fa√ßa os testes com a inst√¢ncia que voc√™ j√° criou */
console.log('O sal√°rio total √© R$', newEmployee.calculateTotalSalary());

/* Exerc√≠cio 8.
Agora, vamos criar a √∫ltima classe do nosso sistema ( ü•≥): `Seller` (vendedor). Todo vendedor, na vida real, √© um funcion√°rio da nossa loja certo? Ent√£o, a classe vendedor deve ser **filha** da classe **`Employee`**. Perceba que agora estamos criando uma classe filha (`Seller`) cuja classe pai (`Employee`)  √© uma classe filha da classe `User`. (Releia essa frase at√© entender bem). Isso √© poss√≠vel de se fazer e muito √∫til, por permitir que **reaproveitemos** muito c√≥digo. 

Comece simplesmente criando a classe sem nenhuma propriedade, mas garantindo que ela √© filha da classe `Employee`. O seu c√≥digo, nesse momento, deve ficar assim:

As propriedades admissionDate e baseSalary foram criadas como protected para que elas n√£o fossem acessadas fora da classe, mas pudessem ser acessadas pela classe filha. Quando j√° sabemos que uma classe ter√° filhas, a gente para para pensar: "o que eu quero que as filhas acessem?" e a resposta para essa pergunta nos d√° as propriedades que devem ser protected. Normalmente, s√£o propriedades "sens√≠veis" mas que s√£o √∫teis dentro das filhas.

a. Crie uma inst√¢ncia da classe Seller. Voc√™ vai reparar que essa classe j√° possui um construtor, pois quando n√£o colocamos um construtor na classe filha, ela herda o construtor da classe Pai. Quais par√¢metros voc√™ teve que passar para esse construtor? 
R- Tive que passar todos os paramentros para criar uma instancia da classe Employee*/
const newSeller: Seller = new Seller(
  '12',
  'seller@gmail.com',
  'Seller1',
  '123587',
  moment('21/04/2017', 'DD/MM/YYYY').format('DD/MM/YYYY'),
  400,
);

/*
b. Imprima todas as informa√ß√µes da inst√¢ncia que voc√™ criou individualmente (ou seja, cada uma em uma linha pr√≥pria). O que voc√™ conseguiu imprimir? O que n√£o conseguiu? Por qu√™? 
R- Todas as informa√ß√µes, exceto o password */
console.log('Ex.8----------------------------------------------');
console.log('ID do Vendedor: ', newSeller.getId());
console.log('Nome do Vendedor: ', newSeller.getName());
console.log('E-mail do Vendedor: ', newSeller.getEmail());
console.log('Data de Admiss√£o do Vendedor: ', newSeller.getAdmissionDate());
console.log(`Salario Base do Vendedor: R$`, newSeller.getBaseSalary());
console.log('----------------------------------------------');

/* Exerc√≠cio 9.
Adicione uma nova propriedade para a classe `Seller`: `salesQuantity` (quantidade de vendas). Ela deve ser um `number`, ser privada, come√ßar com o valor `0` e n√£o pode estar no construtor (n√£o h√° um motivo para isso, √© s√≥ para voc√™  se acostumar com o fato de que **n√£o √© obrigat√≥rio** colocar todas as propriedades no construtor). Por ser privada, crie um m√©todo setter `setSalesQuantity` que permita atualizar o valor dessa propriedade.

a. Agora, teste o m√©todo setter, atualizando esse valor para o que voc√™ quiser. √â poss√≠vel imprimir no terminal o valor salesQuantity da inst√¢ncia que voc√™ criou? Por qu√™?
R- N√£o podemos visualizr o valor da quantidade de venda pois o atributo salesquantity √© privado e n√£o temos um getter para acessar */
console.log(
  'Valor de Sales quantity antes de ser atualizado ',
  newSeller.getSalesQuantity(),
);
newSeller.setSalesQuantity(34);
console.log(
  'Valor de Sales quantity ap√≥s de ser atualizado ',
  newSeller.getSalesQuantity(),
);

/* Exerc√≠cio 10.
Uma classe filha consegue sobrescrever  (override) um m√©todo da sua classe pai, se ela tiver acesso a ele (ou seja, se for  protected ou public). Para exemplificar isso, vamos pedir para que voc√™ altere a implementa√ß√£o da fun√ß√£o calculateTotalSalary na classe Seller. Agora, ela deve calcular o sal√°rio total, seguindo a f√≥rmula: 
Considere que todos os vendedores recebam a mesma comiss√£o de: R$5 por venda.

a. Crie um novo vendedor. Atribua a ele um valor para a salesQuantity. Convoque a fun√ß√£o calculateTotalSalary e  imprima no terminal o valor. O que foi impresso no terminal? Por qu√™?
R- Foi impresso no terminal o salario total do vendedor. Salario base + comiss√£o por venda*/
const sellerNumber2: Seller = new Seller(
  '54',
  'seller2@gmail.com',
  'Seller2',
  '547896321',
  moment('01/08/2017', 'DD/MM/YYYY').format('DD/MM/YYYY'),
  289,
);
sellerNumber2.setSalesQuantity(148);
console.log('Sal√°rio total do vendedor √©: R$', sellerNumber2.calculateTotalSalary());

/* Exerc√≠cio 11.
Para finalizar os conceitos aprendidos em aula, vamos criar agora duas propriedades est√°ticas. Essas propriedades s√£o valores que n√£o dependem da inst√¢ncia da classe. Normalmente, tamb√©m s√£o valores que n√£o mudam muito ao longo da nossa aplica√ß√£o (mas podemos mudar se precisarmos).

Quais s√£o as informa√ß√µes que criamos que s√£o iguais para todas as inst√¢ncias das nossas classes? No caso da classe Employee temos o valor dos benef√≠cios (de R$400) que √© igual para todos os funcion√°rios. J√° na classe Seller, temos o valor da comiss√£o (R$5). Ent√£o seria interessante que essas duas propriedades fossem est√°ticas. 

Comece criando, na classe Employee, um atributo est√°tico (static) que represente o valor dos benef√≠cios (BENEFITS_VALUE) que tenha o valor 400. Altere o m√©todo calculateTotalSalary da classe Employee para que ele utilize essa propriedade em seu c√°lculo.

Agora crie, na classe Seller, um atributo est√°tico (static) que represente o valor das comiss√µes (SELLING_COMMISSION) que tenha o valor 5. Por fim, altere o m√©todo calculateTotalSalary da classe Seller para que ele utilize os atributos est√°ticos em sua implementa√ß√£o.

Perceba que a conven√ß√£o de propriedades est√°ticas pede para colocarmos os nomes em "UnderScoreCase" (NOME_DA_VARIAVEL). N√£o √© obrigat√≥rio isso para funcionar, mas √© o padr√£o, a conven√ß√£o*/


