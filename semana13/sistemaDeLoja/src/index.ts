/* Exerc√≠cio 1.
Analise a classe User. Perceba quais propriedades s√£o p√∫blicas e quais s√£o privadas. Copie esse c√≥digo para o seu exerc√≠cio de hoje; crie uma inst√¢ncia dessa classe (d√™ o nome, email, etc que voc√™ quiser) e imprima, no terminal, o id, o nome e o email desse usu√°rio. 

a. Seria poss√≠vel imprimir a senha (password) atrelada a essa inst√¢ncia?
R- N√£o, pois o password est√° declarado como privado e eu nao tenho um geter para ele
b. Quantas vezes a mensagem "Chamando o construtor da classe User" foi impressa no terminal?
R- Foi chamado uma vez */

import { User } from './User';

const newUser: User = new User('1', 'usuario1@gmail.com', 'Usu√°rio1', '123456');
console.log('Ex.1----------------------------------------------');
console.log('id do usu√°rio: ', newUser.getId());
console.log('Nome do usu√°rio: ', newUser.getName());
console.log('E-mail do usu√°rio: ', newUser.getEmail());
console.log('----------------------------------------------');

/* Exerc√≠cio 2. 
Analise a Customer. Perceba quais propriedades s√£o p√∫blicas e quais s√£o privadas. Copie esse c√≥digo para o seu exerc√≠cio de hoje e crie uma inst√¢ncia dessa classe (com as informa√ß√µes que voc√™ quiser). Atente-se ao fato de que o Customer √© uma subclasse (ou classe filha) da classe User. Sabemos disso porque h√° a palavra extends na declara√ß√£o da classe Customer; e, em seu construtor, foi usado o super.


a. Quantas vezes a mensagem "Chamando o construtor da classe Customer" foi impressa no terminal? 
Foi impressa uma vez
b. Quantas vezes a mensagem "Chamando o construtor da classe User" foi impressa no terminal? Por qu√™?
Foi impressa duas vezes. Porque quando eu chamo o construtor da classe filha eu tamb√©m chamo o construtor da classe pai */
import { Customer } from './Customer';
const newCustumer: Customer = new Customer(
  '5',
  'diego@gmail.com',
  'Diego',
  '2234556',
  '123456789',
);

/* Exerc√≠cio 3.
Agora, imprima todas as informa√ß√µes poss√≠veis da inst√¢ncia que voc√™ criou: o id, o nome, o email, o valor total de compra (purchaseTotal) e o cart√£o de cr√©dito (creditCard). Perceba que as propriedades p√∫blicas da classe pai (User) foram "herdadas" pela classe filha (Customer).

a. Seria poss√≠vel imprimir a senha (password) atrelada a essa inst√¢ncia? Por qu√™? 
R- N√£o porque o password √© um atributo da classe pai e n√£o tem um geter para ele em User, assim ele nao pode ser acessado dentro do Custumer  */
console.log('Ex.3----------------------------------------------');
console.log('ID do consumidor: ', newCustumer.getId());
console.log('Nome do consumidor: ', newCustumer.getName());
console.log('E-mail do consumidor: ', newCustumer.getEmail());
console.log('Total de compra do consumidor: ', newCustumer.purchaseTotal);
console.log('Cart√£o de cr√©dito do consumidor: ', newCustumer.getCreditCard());
console.log('----------------------------------------------');

/* Exerc√≠cio 4.
Adicione um m√©todo p√∫blico √† classe User. Esse m√©todo deve ter o nome de introduceYourself("apresente-se") e deve retornar a mensagem: "Ol√°, bom dia!". As classes filhas sempre t√™m acesso aos m√©todos p√∫blicos da classe pai. Ent√£o, para realizar o teste dessa sua fun√ß√£o, fa√ßa com que a inst√¢ncia que voc√™ criou para a classe Customer chame esse m√©todo  */
newCustumer.introduceYourself();

/* Exerc√≠cio 5.
Altere o m√©todo que voc√™ acabou de criar para que ele imprima a mensagem: "Ol√°, sou ${nome do usu√°rio}. Bom dia!". Realize os mesmos testes anteriores. 
R- A altera√ß√£o foi feita no User.ts */

/* Exerc√≠cio 6.
Agora, vamos criar uma nova classe: a que representa os funcion√°rios (Employee). Ela deve ser uma classe filha da classe User. Al√©m disso,  ela deve possuir as propriedades: data de admiss√£o (admissionDate) e sal√°rio base (baseSalary). Como elas s√£o informa√ß√µes sens√≠veis, n√£o √© recomend√°vel que sejam p√∫blicas. Ent√£o, iremos declar√°-las com o encapsulador protected (voc√™ vai entender o motivo mais para frente). Adicione dois m√©todos getters: um para acessar o admissionDate e outro para o baseSalary. Crie uma inst√¢ncia da classe Employee 
a. Quantas vezes a mensagem `"Chamando o construtor da classe User"` foi impressa no terminal?
R - tr√™s vezes */

import { Employee } from './Employee';
import moment from 'Moment';
const newEmployee: Employee = new Employee(
  '20',
  'employee1@gmail.com',
  'Employee1',
  '1234562',
  moment('01/09/2018', 'DD/MM/YYYY').format('DD/MM/YYYY'),
  500,
);

console.log(newEmployee);

/* b. Imprima as informa√ß√µes dessa inst√¢ncia no terminal. Quais dados s√£o poss√≠veis de serem impressos?*/
console.log('Ex.6----------------------------------------------');
console.log('ID do Funcion√°rio: ', newEmployee.getId());
console.log('Nome do Funcion√°rio: ', newEmployee.getName());
console.log('E-mail do Funcion√°rio: ', newEmployee.getEmail());
console.log(
  'Data de Admiss√£o do Funcion√°rio: ',
  newEmployee.getAdmissionDate(),
);
console.log(`Salario Base do Funcion√°rio: R$`, newEmployee.getBaseSalary());
console.log('----------------------------------------------');

/* Exerc√≠cio 7.
Adicione um m√©todo p√∫blico √† classe Employee: calculateTotalSalary ("calcula o sal√°rio total"). Ele deve retornar o valor do baseSalary somado com os benef√≠cios do funcion√°rio, considere que todos possuem o mesmo valor de R$400 de benef√≠cios. Fa√ßa os testes com a inst√¢ncia que voc√™ j√° criou */
console.log('O sal√°rio total √© R$', newEmployee.calculateTotalSalary());

/* Exerc√≠cio 8.
Agora, vamos criar a √∫ltima classe do nosso sistema ( ü•≥): `Seller` (vendedor). Todo vendedor, na vida real, √© um funcion√°rio da nossa loja certo? Ent√£o, a classe vendedor deve ser **filha** da classe **`Employee`**. Perceba que agora estamos criando uma classe filha (`Seller`) cuja classe pai (`Employee`)  √© uma classe filha da classe `User`. (Releia essa frase at√© entender bem). Isso √© poss√≠vel de se fazer e muito √∫til, por permitir que **reaproveitemos** muito c√≥digo. 

Comece simplesmente criando a classe sem nenhuma propriedade, mas garantindo que ela √© filha da classe `Employee`. O seu c√≥digo, nesse momento, deve ficar assim:

As propriedades admissionDate e baseSalary foram criadas como protected para que elas n√£o fossem acessadas fora da classe, mas pudessem ser acessadas pela classe filha. Quando j√° sabemos que uma classe ter√° filhas, a gente para para pensar: "o que eu quero que as filhas acessem?" e a resposta para essa pergunta nos d√° as propriedades que devem ser protected. Normalmente, s√£o propriedades "sens√≠veis" mas que s√£o √∫teis dentro das filhas.

a. Crie uma inst√¢ncia da classe Seller. Voc√™ vai reparar que essa classe j√° possui um construtor, pois quando n√£o colocamos um construtor na classe filha, ela herda o construtor da classe Pai. Quais par√¢metros voc√™ teve que passar para esse construtor?

b. Imprima todas as informa√ß√µes da inst√¢ncia que voc√™ criou individualmente (ou seja, cada uma em uma linha pr√≥pria). O que voc√™ conseguiu imprimir? O que n√£o conseguiu? Por qu√™? 
*/
